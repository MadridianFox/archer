---
- name: setup arch linux
  hosts: localhost
  connection: local
  vars:
    locale: en_US.UTF-8
    hostname: leviathan
    domain: thisbytes.net
  tasks:
    # get hardware facts
    - name: collect only facts about hardware
      setup:
        gather_subset:
        - hardware
      tags: init

    # set the kyboard layout (default is EN) - skipping

    # verify the boot method
    - name: verify boot method
      command: ls /sys/firmware/efi/efivars
      register: boot_method
      ignore_errors: true
      tags: init

    - name: set efi to true if boot method is efi
      set_fact:
        efi: true
      when: boot_method.rc == 0
      tags: init

    - name: set efi to false if efivars dont exist
      set_fact:
        efi: false
      when: boot_method.rc > 1
      tags: init

    # check internet connection
    - name: ping archlinux.org
      command: ping archlinux.org -c 3
      register: ping_arch
      tags: init

    - name: check if the ping failed
      debug:
        var: ping_arch.stdout_lines
      failed_when: ping_arch.rc > 1
      tags: init

    # update the system clock
    - name: update the system clock
      command: timedatectl set-ntp true
      tags: init

    # figure out the cpu vendor
    - name: set cpu_vendor to amd
      set_fact:
        cpu_vendor: amd
      when: "'AMD' in hostvars[inventory_hostname].ansible_processor[1]"
      tags: init

    - name: set cpu_vendor to intel
      set_fact:
        cpu_vendor: intel
      when: "'Intel' in hostvars[inventory_hostname].ansible_processor[1]"
      tags: init

    # select the disk to partition
    - name: output disks
      debug:
        msg: "{{ hostvars[inventory_hostname].ansible_devices | disks }}"
      tags: init

    - pause:
        prompt: "Select device to partition. Example: /dev/sdx"
      register: selected_disk
      failed_when: "selected_disk.user_input is not match('^(\/dev\/sd[a-z]{1})$')"
      tags: init

    # partition the disk
    - name: create the boot partition
      community.general.parted:
        device: "{{selected_disk.user_input}}"
        number: 1
        state: present
        flags: [ esp ]
        part_end: 512MB
      tags: init

    - name: create the root partition
      community.general.parted:
        device: "{{selected_disk.user_input}}"
        number: 2
        state: present
        fs_type: ext4
        part_start: 512MB
      tags: init

    # format the partitions
    - name: format the boot partition
      community.general.filesystem:
        fstype: vfat
        dev: "{{selected_disk.user_input}}1"
      tags: init

    - name: format the root partition
      community.general.filesystem:
        fstype: ext4
        dev: "{{selected_disk.user_input}}2"
      tags: init

    # mount the root partition
    - name: mount the root partition to /mnt
      shell: mount "{{selected_disk.user_input}}2" /mnt
      tags: init

    # create the /mnt/boot directory
    - name: create the /mnt/boot directory
      file:
        path: /mnt/boot
        state: directory
      tags: init

    # mount the boot partition
    - name: mount the boot partition to /mnt/boot
      shell: mount "{{selected_disk.user_input}}1" /mnt/boot
      tags: init

    # install essential packages
    - name: install essential packages
      shell: pacstrap /mnt base base-devel linux linux-firmware ansible
      tags: init

    # generate fstab
    - name: generate fstab
      shell: genfstab -U /mnt >> /mnt/etc/fstab
      tags: init

    # display message to user
    - debug:
        msg:
          - "Run the following commands!"
          - ""
          - "arch-chroot /mnt"
          - ""
          - "cd /root/archer"
          - ""
          - "source post.sh"
      tags: init

    #
    # begin post install tasks
    #
    - name: set the hardware clock
      shell: hwclock --systohc
      tags: post

    # set the locale
    - name: set the locale
      community.general.locale_gen:
        name: "{{ locale }}"
        state: present
      tags: post

    # set the lang
    - name: set the lang
      copy:
        dest: /etc/locale.conf
        content: "LANG={{ locale }}"
      tags: post

    # set the hostname
    - name: create /etc/hostname
      copy:
        dest: /etc/hostname
        content: "{{ hostname }}"
      tags: post

    # create the hosts file
    - name: create /etc/hosts
      template:
        src: templates/hosts.j2
        dest: /etc/hosts
      tags: post

    # install packages
    - name: install remaining packages
      community.general.pacman:
        name:
          - gnome
          - gdm
          - sudo
          - "{{ cpu_vendor }}-ucode"
          - vi
        state: present
        update_cache: yes
      tags: post

    # update root password
    - pause:
        prompt: "Enter new root password: "
        echo: no
      register: root_password
      tags: post

    - name: update root password
      user:
        name: root
        password: "{{ root_password.user_input }}"
        update_password: always
      tags: post

    # regenerate initramfs
    - name: regenerate initramfs
      shell: mkinitcpio -P
      tags: post

    # install boot loader
    - name: install boot loader
      shell: bootctl install
      tags: post

    # create /boot/loader/loader.conf
    - name: create /boot/loader/loader.conf
      template:
        src: templates/loader.j2
        dest: /boot/loader/loader.conf
      tags: post

    - set_fact:
        uuid: "{{ hostvars[inventory_hostname].ansible_mounts | rootfs_uuid }}"
      tags: post

    # create /boot/loader/entries/arch.conf
    - name: create /boot/loader/entries/arch.conf
      template:
        src: templates/archloader.j2
        dest: /boot/loader/entries/arch.conf
      tags: post

    # add the sudo group
    - name: ensure sudo group exists
      group:
        name: sudo
        state: present
      tags: post

    # add local user
    - pause:
        prompt: "Enter a new local username: "
      register: new_username
      tags: post

    - pause:
        prompt: "Enter password: "
        echo: no
      register: new_username_password
      tags: post

    - name: add user "{{ new_username.user_input }}"
      user:
        name: "{{ new_username.user_input }}"
        password: "{{ new_username_password.user_input }}"
        groups: sudo
        append: yes
      tags: post

    # update sudoers file
    - name: update sudoers file
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: "^# %sudo ALL="
        line: "%sudo ALL=(ALL) ALL"
        validate: "/usr/sbin/visudo -cf %s"
      tags: post

    - user:
        name: aur_builder
        group: wheel
      tags: post

    - lineinfile:
        path: /etc/sudoers.d/11-install-aur_builder
        line: 'aur_builder ALL=(ALL) NOPASSWD: /usr/bin/pacman'
        create: yes
        validate: 'visudo -cf %s'
      tags: post

    - name: Install trizen using makepkg, skip if trizen is already installed
      aur: name=trizen use=makepkg skip_installed=true
      become: yes
      become_user: aur_builder
      tags: post

    - name: install packages from the AUR
      aur:
        use: trizen
        name:
          - google-chrome
          - signal-desktop-bin
          - pamac-aur
        skip_installed: true
      become: yes
      become_user: aur_builder
      tags: post

    # enable services
    - name: enable services
      shell: "systemctl enable {{ item }}"
      with_items:
        - NetworkManager.service
        - gdm.service
      tags: post

    # display message to user
    - debug:
        msg:
          - "Run the following commands!"
          - ""
          - "exit"
          - ""
          - "umount -R /mnt"
          - ""
          - "reboot"
      tags: post
